"""
Export module for POI-Harvester CLI
"""

import csv
import json
import os
import sys
from typing import List, Dict


def get_sql_header() -> str:
    """
    Get standard SQL file header with comments

    Returns:
        SQL header string with attribution and license info
    """
    return """-- SQL Export generated by POI-Harvester
-- Data retrieved via Overpass API from OpenStreetMap (www.openstreetmap.org)
-- This dataset contains public geospatial information made available by
-- OpenStreetMap contributors under the Open Database License (ODbL).
-- See https://opendatacommons.org/licenses/odbl/1-0/ for licensing details.
-- Attribution: © OpenStreetMap contributors
-- POI-Harvester © by lpj.app @ https://github.com/lpj-app

"""


def export_csv(data: List[Dict], keys: List[str], output_file: str) -> bool:
    """
    Export POI data to CSV format

    Args:
        data: List of POI dictionaries
        keys: List of OSM keys to include as columns
        output_file: Output file path

    Returns:
        True if export successful, False otherwise
    """
    try:
        with open(output_file, "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=["lat", "lon"] + keys)
            writer.writeheader()

            for item in data:
                # Get coordinates
                lat = item.get("lat")
                lon = item.get("lon")

                # Skip items without coordinates
                if lat is None or lon is None:
                    continue

                # Build row
                row = {"lat": lat, "lon": lon}

                # Add tag values
                tags = item.get("tags", {})
                for key in keys:
                    row[key] = tags.get(key, "")

                writer.writerow(row)

        print(f"CSV exported to: {output_file}", file=sys.stderr)
        return True

    except Exception as e:
        print(f"Error exporting CSV: {e}", file=sys.stderr)
        return False


def export_sql(data: List[Dict], keys: List[str], output_file: str,
               table_name: str, column_map: Dict[str, str]) -> bool:
    """
    Export POI data to SQL file format

    Args:
        data: List of POI dictionaries
        keys: List of OSM keys to include as columns
        output_file: Output file path
        table_name: SQL table name
        column_map: Mapping of OSM keys to SQL column names

    Returns:
        True if export successful, False otherwise
    """
    try:
        # Build column definitions
        column_definitions = {
            "lat": "REAL",
            "lon": "REAL"
        }

        mapped_columns = {}
        for key in keys:
            column_name = column_map.get(key, key)
            column_definitions[column_name] = "TEXT"
            mapped_columns[key] = column_name

        all_columns = list(column_definitions.keys())

        # Create table statement
        create_stmt = f"CREATE TABLE IF NOT EXISTS {table_name} (\n  " + \
                      ",\n  ".join([f"{col} {typ}" for col, typ in column_definitions.items()]) + \
                      "\n);"

        # Write SQL file
        with open(output_file, "w", encoding="utf-8") as f:
            # Write header
            f.write(get_sql_header())

            # Write create table statement
            f.write(create_stmt + "\n\n")

            # Write insert statements
            for item in data:
                # Get coordinates
                lat = item.get("lat")
                lon = item.get("lon")

                # Skip items without coordinates
                if lat is None or lon is None:
                    continue

                # Build row data
                row = {"lat": lat, "lon": lon}

                # Add mapped tag values
                tags = item.get("tags", {})
                for tag_key, col_name in mapped_columns.items():
                    row[col_name] = tags.get(tag_key, "")

                # Escape single quotes and build insert statement
                escaped_values = []
                for col in all_columns:
                    value = str(row.get(col, "")).replace("'", "''")
                    escaped_values.append(f"'{value}'")

                values_str = ", ".join(escaped_values)
                columns_str = ", ".join(all_columns)

                insert_stmt = f"INSERT INTO {table_name} ({columns_str}) VALUES ({values_str});"
                f.write(insert_stmt + "\n")

        print(f"SQL exported to: {output_file}", file=sys.stderr)
        return True

    except Exception as e:
        print(f"Error exporting SQL: {e}", file=sys.stderr)
        return False


def export_json(data: List[Dict], keys: List[str], output_file: str) -> bool:
    """
    Export POI data to JSON format

    Args:
        data: List of POI dictionaries
        keys: List of OSM keys to include
        output_file: Output file path

    Returns:
        True if export successful, False otherwise
    """
    try:
        # Build JSON structure
        json_data = []

        for item in data:
            # Get coordinates
            lat = item.get("lat")
            lon = item.get("lon")

            # Skip items without coordinates
            if lat is None or lon is None:
                continue

            # Build JSON object
            json_item = {
                "lat": lat,
                "lon": lon
            }

            # Add tag values
            tags = item.get("tags", {})
            for key in keys:
                value = tags.get(key, "")
                if value:  # Only include non-empty values
                    json_item[key] = value

            json_data.append(json_item)

        # Write JSON file
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False)

        print(f"JSON exported to: {output_file}", file=sys.stderr)
        return True

    except Exception as e:
        print(f"Error exporting JSON: {e}", file=sys.stderr)
        return False


def get_all_keys_from_data(data: List[Dict]) -> List[str]:
    """
    Extract all unique tag keys from POI data

    Args:
        data: List of POI dictionaries

    Returns:
        Sorted list of unique tag keys
    """
    all_keys = set()
    for item in data:
        tags = item.get("tags", {})
        all_keys.update(tags.keys())

    return sorted(all_keys)