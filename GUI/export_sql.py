import sqlite3
import os
import tkinter.filedialog


def export_to_sql(data, tag_vars, column_map, table_name, status_label):
    filepath = tkinter.filedialog.asksaveasfilename(
        defaultextension=".db",
        filetypes=[("SQLite Database", "*.db")],
        initialfile="poi_harvester.db",
        title="Save as SQLite DB"
    )

    if not filepath:
        status_label.configure(text="⚠️ SQL export cancelled")
        return

    conn = sqlite3.connect(filepath)
    cursor = conn.cursor()

    table_name = table_name or "poi_data"

    column_definitions = {
        "lat": "REAL",
        "lon": "REAL"
    }

    mapped_columns = {}
    for key, entry_widget in column_map.items():
        if tag_vars.get(key) and tag_vars[key].get():
            column_name = entry_widget.get().strip() or key
            column_definitions[column_name] = "TEXT"
            mapped_columns[key] = column_name

    all_columns = list(column_definitions.keys())
    column_stmt = ", ".join([f"{col} {typ}" for col, typ in column_definitions.items()])
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({column_stmt})")

    for el in data:
        tags = el.get("tags", {})
        if "lat" in el:
            lat = el["lat"]
            lon = el["lon"]
        else:
            lat = el.get("center", {}).get("lat")
            lon = el.get("center", {}).get("lon")

        if lat is None or lon is None:
            continue

        row = {
            "lat": lat,
            "lon": lon
        }
        for tag_key, col_name in mapped_columns.items():
            row[col_name] = tags.get(tag_key, "")

        col_list = list(row.keys())
        values = [row.get(col, "") for col in col_list]
        cursor.execute(
            f"INSERT INTO {table_name} ({', '.join(col_list)}) VALUES ({', '.join(['?'] * len(values))})",
            values
        )

    conn.commit()
    conn.close()
    status_label.configure(text=f"✅ Exported to SQLite database: {os.path.basename(filepath)}")


def export_sql_file(data, tag_vars, column_map, table_name, status_label, location, radius, type_options):
    location = location.replace(" ", "_") or "unknown"
    radius = radius.replace(" ", "_") or "0km"
    selected_types = [t.replace("=", "-") for t, var in type_options.items() if var.get()]
    type_str = "_".join(selected_types) if selected_types else "no-types"
    default_filename = f"poi-harvester_{location}_{radius}_{type_str}.sql"

    filepath = tkinter.filedialog.asksaveasfilename(
        defaultextension=".sql",
        filetypes=[("SQL Script", "*.sql")],
        initialfile=default_filename,
        title="Save SQL script"
    )

    if not filepath:
        status_label.configure(text="⚠️ SQL file export cancelled")
        return

    table_name = table_name or "poi_data"

    column_definitions = {
        "lat": "REAL",
        "lon": "REAL"
    }

    mapped_columns = {}
    for key, entry_widget in column_map.items():
        if tag_vars.get(key) and tag_vars[key].get():
            column_name = entry_widget.get().strip() or key
            column_definitions[column_name] = "TEXT"
            mapped_columns[key] = column_name

    all_columns = list(column_definitions.keys())
    create_stmt = f"CREATE TABLE IF NOT EXISTS {table_name} (\n  " + ",\n  ".join([f"{col} {typ}" for col, typ in column_definitions.items()]) + "\n);"

    try:
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("-- SQL Export generated by POI-Harvester\n")
            f.write("-- Data retrieved via Overpass API from OpenStreetMap (www.openstreetmap.org) \n\n")
            f.write("-- This dataset contains public geospatial information made available by \n")
            f.write("-- OpenStreetMap contributors under the Open Database License (ODbL). \n")
            f.write("-- See https://opendatacommons.org/licenses/odbl/1-0/ for licensing details. \n\n")
            f.write("-- Attribution: © OpenStreetMap contributors \n")
            f.write("-- POI-Harvester © by lpj.app @ https://github.com/lpj-app \n")
            f.write(create_stmt + "\n\n")

            for el in data:
                tags = el.get("tags", {})
                lat = el.get("lat") or el.get("center", {}).get("lat")
                lon = el.get("lon") or el.get("center", {}).get("lon")
                if lat is None or lon is None:
                    continue

                row = {
                    "lat": lat,
                    "lon": lon
                }

                for tag_key, col_name in mapped_columns.items():
                    row[col_name] = tags.get(tag_key, "")

                escaped = [str(row.get(col, "")).replace("'", "''") for col in all_columns]
                vals = ", ".join([f"'{v}'" for v in escaped])
                insert_stmt = f"INSERT INTO {table_name} ({', '.join(all_columns)}) VALUES ({vals});"
                f.write(insert_stmt + "\n")

        status_label.configure(text=f"✅ SQL script saved to '{os.path.basename(filepath)}'")
    except Exception as e:
        status_label.configure(text=f"❌ Error saving SQL script: {e}")
